================= Day 4 ‚Äì Reverse Proxy =================

M·ª•c ti√™u:
- D·ª±ng Node.js app ch·∫°y trong container, kh√¥ng m·ªü port ra ngo√†i.
- D√πng Nginx l√†m reverse proxy, map http://app.local:2840 ‚Üí Node app.

K·∫øt qu·∫£:
- Truy c·∫≠p http://app.local:2840 th·∫•y "Hello from Node app - Day 4".
- Container node_app kh√¥ng c√≥ port ngo√†i host, ch·ªâ Nginx c√≥ 2840:80.

Nh·ªØng v·∫•n ƒë·ªÅ th·ª±c t·∫ø:
- N·∫øu m·ªói service ƒë·ªÅu t·ª± m·ªü port ra ngo√†i th√¨:
  + M·ªói l·∫ßn truy c·∫≠p ph·∫£i nh·ªõ port (3000, 4000, 5000‚Ä¶).
  + Kh√≥ qu·∫£n l√Ω SSL/HTTPS, firewall, domain.
  + B·∫£o m·∫≠t k√©m: ai c≈©ng c√≥ th·ªÉ truy c·∫≠p tr·ª±c ti·∫øp backend.
- Nh∆∞ng Nginx reverse proxy xu·∫•t hi·ªán ƒë·ªÉ gi·∫£i quy·∫øt nh·ªØng v·∫•n ƒë·ªÅ th·ª±c t·∫ø n√†y:
  + Che gi·∫•u backend: b√™n ngo√†i kh√¥ng bi·∫øt service n√†o ch·∫°y port n√†o.
  + Gom nhi·ªÅu backend v·ªÅ m·ªôt c·ªïng duy nh·∫•t (80/443) ‚Üí d·ªÖ qu·∫£n l√Ω firewall, SSL.
  + G·∫Øn domain ƒë·∫πp cho t·ª´ng service (app.local, api.local‚Ä¶) thay v√¨ nh·ªõ port.
  + Cho ph√©p th√™m caching, load balancing, rate limit‚Ä¶ m√† kh√¥ng ƒë·ª•ng t·ªõi code backend.

Gi·∫£i th√≠ch:
- node_app ch·ªâ EXPOSE 3000 (n·ªôi b·ªô), kh√¥ng map ra host.
- Nginx v√† node_app c√πng m·∫°ng Docker n√™n Nginx g·ªçi ƒë∆∞·ª£c http://nodeapp:3000.
- Nginx l√† ‚Äúc·ª≠a‚Äù duy nh·∫•t m·ªü ra host (2840:80). Browser ch·ªâ k·∫øt n·ªëi t·ªõi Nginx.
- ƒê√¢y ch√≠nh l√† pattern ‚Äúreverse proxy‚Äù th·ª±c t·∫ø, gi·ªëng nh∆∞ ‚Äúnetwork gateway‚Äù.

============================
neu chi thay doi code hoac docker-compose.yml, thi chay lenh: docker compose up  -d
neu thay doi: thai chay lenh : docker compose up --build -d
    - file Dockerfile
    - Thay ƒë·ªïi code n·∫±m trong th∆∞ m·ª•c build context ƒë∆∞·ª£c COPY v√†o image.
    - Ho·∫∑c ch·∫Øc ch·∫Øn mu·ªën rebuild cho s·∫°ch.

=============== phan biet =============
- Forward Proxy = ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng ‚Üí ra ngo√†i
    + T√¥i kh√¥ng c·∫ßn bi·∫øt ch√≠nh x√°c ai g·ª≠i ƒë·∫øn t√¥i, ch·ªâ c·∫ßn bi·∫øt server ƒë√≠ch l√† g√¨. IP hi·ªán l√™n server ƒë√≠ch l√† IP proxy, kh√¥ng ph·∫£i IP th·∫≠t c·ªßa client
- Reverse Proxy = ƒë·∫°i di·ªán cho server ‚Üí nh·∫≠n v√†o
    + T√¥i kh√¥ng c·∫ßn bi·∫øt ch√≠nh x√°c ai g·ª≠i ƒë·∫øn t√¥i (client), t√¥i s·∫Ω ph√¢n ph·ªëi request n√†y cho m·ªôt trong c√°c server backend c√≥ IP kh√°c nhau ƒë·ªÉ x·ª≠ l√Ω.‚Äù

| **Ti√™u ch√≠**                         | **Forward Proxy** üßç‚û°Ô∏èüåç                                                        | **Reverse Proxy** üåç‚û°Ô∏èüßç                                                             |
| ------------------------------------ | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------ |
| **ƒê·∫°i di·ªán cho ai?**                 | ƒê·∫°i di·ªán cho **client** (ng∆∞·ªùi d√πng)                                            | ƒê·∫°i di·ªán cho **server** (h·ªá th·ªëng backend)                                           |
| **·∫®n IP c·ªßa ai?**                    | ·∫®n IP c·ªßa **client**                                                            | ·∫®n IP c·ªßa **server**                                                                 |
| **D√πng ·ªü ph√≠a n√†o?**                 | Ph√≠a **client-side** (g·∫ßn ng∆∞·ªùi d√πng)                                           | Ph√≠a **server-side** (tr∆∞·ªõc server g·ªëc)                                              |
| **V·ªã tr√≠ ƒë·∫∑t**                       | ƒê·∫∑t **tr∆∞·ªõc client**, ki·ªÉm so√°t outbound traffic                                | ƒê·∫∑t **tr∆∞·ªõc server**, ki·ªÉm so√°t inbound traffic                                      |
| **M·ª•c ti√™u ch√≠nh**                   | Truy c·∫≠p ra ngo√†i, v∆∞·ª£t t∆∞·ªùng l·ª≠a, l·ªçc n·ªôi dung, cache web                      | B·∫£o v·ªá backend, ph√¢n t·∫£i (load balancing), cache n·ªôi dung, x·ª≠ l√Ω SSL, tƒÉng hi·ªáu nƒÉng |
| **Truy c·∫≠p server n√†o?**             | Truy c·∫≠p **b·∫•t k·ª≥ server ngo√†i n√†o**                                            | Chuy·ªÉn ti·∫øp ƒë·∫øn **c√°c backend server c·ª• th·ªÉ**                                        |
| **Client c√≥ bi·∫øt server g·ªëc kh√¥ng?** | C√≥ th·ªÉ **kh√¥ng bi·∫øt** ‚Äî proxy thay m·∫∑t client truy c·∫≠p internet                 | **Kh√¥ng bi·∫øt** ‚Äî ch·ªâ th·∫•y proxy, kh√¥ng th·∫•y server g·ªëc                               |
| **Server c√≥ bi·∫øt client kh√¥ng?**     | Th∆∞·ªùng ch·ªâ th·∫•y **IP c·ªßa proxy**, kh√¥ng th·∫•y IP th·∫≠t c·ªßa client                 | C√≥ th·ªÉ th·∫•y IP th·∫≠t n·∫øu proxy truy·ªÅn qua (`X-Forwarded-For`, ...)                    |
| **Ai c·∫•u h√¨nh & ki·ªÉm so√°t?**         | Do ng∆∞·ªùi d√πng ho·∫∑c t·ªï ch·ª©c **ph√≠a client** c·∫•u h√¨nh (c√¥ng ty, tr∆∞·ªùng h·ªçc, v.v.) | Do **admin ph√≠a server / d·ªãch v·ª•** c·∫•u h√¨nh (DevOps, SysAdmin, ... )                 |
| **Ch·ª©c nƒÉng ph·ªï bi·∫øn**               | ·∫®n danh, v∆∞·ª£t ki·ªÉm duy·ªát, l·ªçc web, cache cho client                             | Load balancing, SSL termination, caching server, b·∫£o m·∫≠t server n·ªôi b·ªô               |
| **T∆∞·ªùng h·ª£p d√πng ph·ªï bi·∫øn**          | Truy c·∫≠p ·∫©n danh, d√πng VPN/proxy ƒë·ªÉ v√†o web b·ªã ch·∫∑n, l·ªçc n·ªôi dung               | Web server c·∫ßn ph√¢n t·∫£i, b·∫£o v·ªá API, gi·∫•u ki·∫øn tr√∫c backend, d√πng CDN ho·∫∑c Nginx     |
| **V√≠ d·ª• th·ª±c t·∫ø**                    | VPN, Tor, Squid Proxy, proxy n·ªôi b·ªô tr∆∞·ªùng h·ªçc                                  | Nginx reverse proxy, HAProxy, Cloudflare, AWS ALB, Apache mod_proxy                  |
